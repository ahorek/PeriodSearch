# This should work on Linux.  Modify as needed for other platforms.

# READ ME FIRST:
#
# To keep consistency of the repository and not be relying on hardcoded paths, please create symbolic links that will be outside the path under
# versioning control and this way will not break anyone's environment setups.
# From your /home/[YOUR_USERNAME] directory run: 
#   ln -s /usr/local/cuda-12.0 cuda-12.0
#   ln -s /[your_boinc_path] boinc_src 
# or change those paths accordingly to your setup.
#

# DO-NOT-CHANGE!
BOINC_DIR = ../../../boinc_src
BOINC_API_DIR = $(BOINC_DIR)/api
BOINC_LIB_DIR = $(BOINC_DIR)/lib
PS_COMMON_DIR = ../../period_search_common
PS_COMMON_LIB_DIR = $(PS_COMMON_DIR)/build
CUDA_PATH = ../../../cuda-11.8
BUILD_DIR = ./build
# END DO-NOT-CHANGE

CXXFLAGS =-O3 -s \
	-I$(BOINC_DIR) \
	-I$(BOINC_LIB_DIR) \
	-I$(BOINC_API_DIR) \
	-I$(PS_COMMON_DIR) \
	-I$(CUDA_PATH)/include \
	-L$(PS_COMMON_LIB_DIR) \
	-L /usr/X11R6/lib \
	-L.

# There were two cases from the legacy code - first was using --maxrregcount=80 which is very inefficient on block occupancy.
# After precise examination on results from NVIDIA Nsight Performance Analysis both are set to 32 now. This way we achieve 100% block occupancy (most of the time).
# 28 APR 2020 - Temporarily '--maxrregcount' is set back to '80' for the NVCCFLAGS until further research proves it needs to be set back to '32' 

# CUDA 5.5: NVCCFLAGS = --ptxas-options=-v --generate-code arch=compute_20,code=sm_20 --generate-code arch=compute_20,code=sm_21 --generate-code arch=compute_30,code=sm_30 --generate-code arch=compute_35,code=sm_35 --generate-code arch=compute_35,code=compute_35 --maxrregcount=80 -rdc=true
# CUDA 10.2 - CC: NVCCFLAGS = compute_30,sm_30;compute_35,sm_35;compute_37,sm_37;compute_50,sm_50;compute_52,sm_52;compute_60,sm_60;compute_61,sm_61;compute_70,sm_70;compute_75,sm_75
# CUDA 11.1 - CC: NVCCFLAGS = compute_52,sm_52;compute_60,sm_60;compute_61,sm_61;compute_70,sm_70;compute_75,sm_75;compute_80,sm_80;compute_86,sm_86
# CUDA 11.8 - CC: NVCCFLAGS = --ptxas-options=-v --generate-code arch=compute_52,code=sm_52 --generate-code arch=compute_60,code=sm_60 --generate-code arch=compute_61,code=sm_61 --generate-code arch=compute_70,code=sm_70 --generate-code arch=compute_75,code=sm_75 --generate-code arch=compute_80,code=sm_80 --generate-code arch=compute_86,code=sm_86 --maxrregcount=80 -rdc=tru
# CUDA 12.0 - CC:
NVCCFLAGS = -O3 --extra-device-vectorization  --ptxas-options=-v --generate-code arch=compute_35,code=sm_35 arch=compute_37,code=sm_37 arch=compute_50,code=sm_50 \
	--generate-code arch=compute_52,code=sm_52 --generate-code arch=compute_53,code=sm_53 --generate-code arch=compute_60,code=sm_60 \
	--generate-code arch=compute_61,code=sm_61 --generate-code arch=compute_62,code=sm_62 --generate-code arch=compute_70,code=sm_70 \
	--generate-code arch=compute_72,code=sm_72 --generate-code arch=compute_75,code=sm_75 --generate-code arch=compute_80,code=sm_80 \
	--generate-code arch=compute_86,code=sm_86 --generate-code arch=compute_87,code=sm_87 --generate-code arch=compute_89,code=sm_89 \
	--generate-code arch=compute_90,code=sm_90 --maxrregcount=255 -rdc=true


CC=g++
CXX=g++
OPTFLAGS=-O3 -s
CFLAGS=$(OPTFLAGS) -Wall
LDFLAGS=-lm -lrt -ldl -Xlinker -rpath . -L$(PS_COMMON_LIB_DIR) -lps_common

MY_LIBS=$(addprefix $(BUILD_DIR)/, trifac.o areanorm.o sphfunc.o ellfit.o ludcmp.o lubksb.o mrqmin.o mrqcof.o curv.o blmatrix.o conv.o matrix.o \
	bright.o gauss_errc.o pscuda.device-link.o start_CUDA.o curve2_CUDA.o Start.o ComputeCapability.o)

PROGS = $(BUILD_DIR)/period_search_BOINC_cuda11800_v10222_Release

all: $(BUILD_DIR) $(PROGS)

libstdc++.a:
	ln -s `g++ -print-file-name=libstdc++.a`

# libcudart.so:
# 	ln -s $(CUDA_PATH)/lib64/libcudart.so libcudart.so

libcuda.so:
	ln -s $(CUDA_PATH)/lib64/stubs/libcuda.so libcuda.so

libnvidia-ml.so:
	ln -f -s $(CUDA_PATH)/lib64/stubs/libnvidia-ml.so libnvidia-ml.so

# clean:
# 	/bin/rm -f $(BUILD_DIR)/* libstdc++.a libcudart.so libcuda.so
clean:
	/bin/rm -f $(BUILD_DIR)/* libstdc++.a libcuda.so

# distclean:
# 	/bin/rm -f $(BUILD_DIR)/* libstdc++.a libcudart.so libcuda.so
distclean:
	/bin/rm -f $(BUILD_DIR)/* libstdc++.a libcuda.so

install: $(BUILD_DIR)/period_search_BOINC_cuda11800_v10222_Release

# specify library paths explicitly (rather than -l)
# because otherwise you might get a version in /usr/lib etc.

# Create the build directory if it doesn't exist
$(BUILD_DIR):
	mkdir -p $(BUILD_DIR)

$(BUILD_DIR)/period_search_BOINC_cuda11800_v10222_Release: $(BUILD_DIR)/period_search_BOINC.o $(MY_LIBS) libstdc++.a $(BOINC_API_DIR)/libboinc_api.a $(BOINC_LIB_DIR)/libboinc.a \
	libcuda.so libnvidia-ml.so $(PS_COMMON_LIB_DIR)/libps_common.a $(CUDA_PATH)/lib64/libcudart_static.a
	$(CXX) $(CXXFLAGS) -o $@ $(MY_LIBS) $< libstdc++.a -pthread \
	$(PS_COMMON_LIB_DIR)/libps_common.a \
	$(CUDA_PATH)/lib64/libcudart_static.a \
	$(BOINC_API_DIR)/libboinc_api.a  libcuda.so libnvidia-ml.so \
	$(BOINC_LIB_DIR)/libboinc.a $(LDFLAGS)

# libcudart.so

# Compilation rules for CUDA and C++ files
$(BUILD_DIR)/%.o: %.cu
	$(CUDA_PATH)/bin/nvcc --compiler-bindir=/usr/bin/gcc $(OPTIMIZATION) \
		$(NVCCFLAGS) \
		--compiler-options="$(CXXFLAGS)" \
		--compile $< -o $@

$(BUILD_DIR)/%.o: %.cpp
	$(CXX) $(CXXFLAGS) -c $< -o $@

# Special rule for pscuda.device-link.o
$(BUILD_DIR)/pscuda.device-link.o: $(BUILD_DIR)/start_CUDA.o $(BUILD_DIR)/Start.o $(BUILD_DIR)/blmatrix.o $(BUILD_DIR)/bright.o $(BUILD_DIR)/conv.o $(BUILD_DIR)/curv.o $(BUILD_DIR)/gauss_errc.o $(BUILD_DIR)/mrqcof.o $(BUILD_DIR)/mrqmin.o $(BUILD_DIR)/matrix.o $(BUILD_DIR)/curve2_CUDA.o $(BUILD_DIR)/ComputeCapability.o
	$(CUDA_PATH)/bin/nvcc -dlink -o $@ --compiler-bindir=/usr/bin/gcc $(OPTIMIZATION) \
		$(NVCCFLAGS) \
		--compiler-options="$(CXXFLAGS)" \
		$(BUILD_DIR)/start_CUDA.o $(BUILD_DIR)/Start.o $(BUILD_DIR)/blmatrix.o $(BUILD_DIR)/bright.o $(BUILD_DIR)/conv.o $(BUILD_DIR)/curv.o $(BUILD_DIR)/gauss_errc.o $(BUILD_DIR)/mrqcof.o $(BUILD_DIR)/mrqmin.o $(BUILD_DIR)/matrix.o $(BUILD_DIR)/curve2_CUDA.o $(BUILD_DIR)/ComputeCapability.o

# Compilation rule for C files
%.o: %.c
	$(CC) $(CFLAGS) -c $< -o $(BUILD_DIR)/$@

# Print "All done." after all targets are built 
done: 
	@echo "All done."
