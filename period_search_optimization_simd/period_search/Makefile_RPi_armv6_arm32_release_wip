# This should work on Linux.  Modify as needed for other platforms.
#
#	For now (as of 5th April 2024) we'll keep this Make file as a refferense only.
#	The following Makefile SHOULD produces armv7 32bit period-search application. Tested on RPi CM4 2GB, running 64-bit Buster distro.
#
#   If you run this Makefile on different platform than RPi 1 Zero, even using arm-linux-gnueabihf-g++ (Debian 8.3.0-2) 8.3.0compiler,
#	compilation will produce error:
# 		/usr/arm-linux-gnueabihf/include/bits/stdio.h: In function ‘int vprintf(const char*, __gnuc_va_list)’:
# 		/usr/arm-linux-gnueabihf/include/bits/stdio.h:39:60: sorry, unimplemented: Thumb-1 hard-float VFP ABI
# 		 vprintf (const char *__restrict __fmt, __gnuc_va_list __arg)
#
#  	More on that issue here:
#	https://forums.raspberrypi.com/viewtopic.php?t=290804#p1758436
#	"I suspect the cause of your failure is using a build environment based on Debian buster rather than raspbian buster. 
#	Debian armhf's gcc has "-mthumb" as part of it's hardcoded default flags, which causes it to be unable to build armv6 code
#	(as requested by the compiler flags, which are presumablly set by the raspberry pi foundation ffmpeg packaging."
#	It is due to the compiler being not cappable to handle correctly armv6 architecture (debian compilator). 
#
#	You can try using the -marm options instead of -march=armv6, the error will be gone but when you run the binary on an armv6 platform
#	it will produce the following error:
#		Segmentation fault
#
#	Prepare BOINC API as follows:	
#		./_autosetup # Only first time
#		./configure --disable-server --disable-client --disable-manager --build=arm-linux-gnueabihf --target=arm-linux-gnueabihf CC="arm-linux-gnueabihf-g++" CXX="arm-linux-gnueabihf-g++" CPP="arm-linux-gnueabihf-g++ -E" CXXFLAGS="-marm -mcpu=arm6 -mfloat-abi=hard -mfpu=vfp -std=c++17 -O3"
#		make
#
#	To check for the supported macroses use:
#		echo | g++ -dM -E -
#		echo | arm-linux-gnueabihf-g++ -dM -E -
#		echo | clang++ -dM -E -
#

BUILD_DIR = build
BOINC_DIR = ../../../boinc_src_armv6
BOINC_API_DIR = $(BOINC_DIR)/api
BOINC_LIB_DIR = $(BOINC_DIR)/lib
PS_COMMON_DIR = ../../period_search_common
PS_COMMON_LIB_DIR = $(PS_COMMON_DIR)/build

CXX = arm-linux-gnueabihf-g++ 
# Use `readelf -p .GCC.command.line period_search_rpi_armv7_arm32` to see all used compiler commands
CXXFLAGS = -march=armv6 -O3 -std=c++2a -w -s -frecord-gcc-switches -mfloat-abi=hard -mfpu=vfp \
    -DARM32 \
	-I$(BOINC_DIR) \
	-I$(BOINC_LIB_DIR) \
	-I$(BOINC_API_DIR) \
	-I /usr/lib/arm-linux-gnueabihf \
	-I$(PS_COMMON_DIR) \
	-L$(PS_COMMON_LIB_DIR) \
	-L/usr/X11R6/lib \
	-L.

# Define the target executable
TARGET = $(BUILD_DIR)/period_search_rpi_armv6_arm32

# Define the source files
SRC = areanorm.cpp blmatrix.cpp bright.cpp \
	conv.cpp \
	covsrt.cpp CpuInfoArm32.cpp curv.cpp \
	ellfit.cpp EnumHelpers.cpp gauss_errc.cpp \
	lubksb.cpp ludcmp.cpp matrix.cpp \
	mrqcof.cpp \
	mrqmin.cpp phasec.cpp sphfunc.cpp systeminfo.cpp \
	trifac.cpp VersionInfo.cpp period_search_BOINC.cpp
# Define the object files
OBJ = $(SRC:%.cpp=$(BUILD_DIR)/%.o)

# Default target to build the executable
all: $(BUILD_DIR) $(TARGET)

# Rule to create build directory
$(BUILD_DIR):
	mkdir -p $(BUILD_DIR)

 # Rule to build the static library
$(TARGET): $(OBJ) $(BOINC_LIB_DIR)/libboinc.a $(BOINC_API_DIR)/libboinc_api.a $(PS_COMMON_LIB_DIR)/libps_common.a
	$(CXX) $(CXXFLAGS) -o $@ $(OBJ) -pthread \
	$(PS_COMMON_LIB_DIR)/libps_common.a \
	$(BOINC_API_DIR)/libboinc_api.a \
	$(BOINC_LIB_DIR)/libboinc.a \
	-lm

# Rule to build object files
$(BUILD_DIR)/%.o: %.cpp
	@mkdir -p $(BUILD_DIR)
	$(CXX) $(CXXFLAGS) -c $< -o $@

# Clean rule to remove compiled files
clean:
	rm -rf $(BUILD_DIR)

.PHONY: all clean
